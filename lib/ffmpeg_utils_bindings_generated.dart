// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/ffmpeg_utils.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FFmpegUtilsBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FFmpegUtilsBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FFmpegUtilsBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int log_dump_format(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _log_dump_format(
      filename,
    );
  }

  late final _log_dump_formatPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'log_dump_format');
  late final _log_dump_format =
      _log_dump_formatPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void show_codecs() {
    return _show_codecs();
  }

  late final _show_codecsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('show_codecs');
  late final _show_codecs = _show_codecsPtr.asFunction<void Function()>();

  /// Muxer: merge video and audio into one file. Return -1 if error occurred, 0
  /// otherwise.
  int muxer(
    ffi.Pointer<ffi.Char> video_filename,
    ffi.Pointer<ffi.Char> audio_filename,
    ffi.Pointer<ffi.Char> output_filename,
  ) {
    return _muxer(
      video_filename,
      audio_filename,
      output_filename,
    );
  }

  late final _muxerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('muxer');
  late final _muxer = _muxerPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'sum_long_running');
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();
}
